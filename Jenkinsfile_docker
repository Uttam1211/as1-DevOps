/*
 * =============================================================================
 * Task Management System - CI/CD Pipeline
 * Author: Uttam Thakur
 * Course: CSY3056 - DevOps
 * University of Northampton
 *
 * Purpose: This Jenkins pipeline implements a streamlined CI/CD process for the
 * Task Management System, including build, test, and deployment stages with
 * proper error handling and security measures.
 * =============================================================================
 */

pipeline {
    agent any
    
    // Environment Configuration
    // Define critical variables used throughout the pipeline
    environment {
        APP_NAME = 'task-management-system'
        DOCKER_IMAGE = 'task-management'
        CONTAINER_NAME = 'task-app-staging'
        CONTAINER_PORT = '8000'
        HOST_PORT = '8001'
    }
    
    // Pipeline Configuration
    // Set up pipeline behavior and constraints
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timeout(time: 15, unit: 'MINUTES')
        timestamps()
        disableConcurrentBuilds()
    }
    
    stages {
        // Source Code Management
        // Retrieve and validate source code
        stage('Checkout') {
            steps {
                cleanWs()
                checkout scm
                
                sh '''
                    # Verify required project files
                    for file in app.py test_app.py requirements.txt Dockerfile; do
                        if [ -f "$file" ]; then
                            echo "Verified: $file"
                        else
                            echo "Missing required file: $file"
                            exit 1
                        fi
                    done
                '''
            }
        }
        
        // Container Build
        // Create Docker image with application code
        stage('Build Docker Image') {
            steps {
                sh '''
                    # Clean up old images
                    docker images --format "{{.Repository}}:{{.Tag}}" | grep "^task-management:" | xargs -r docker rmi -f || true
                    
                    # Build fresh image
                    docker build --no-cache -t ${DOCKER_IMAGE}:${BUILD_NUMBER} .
                    docker tag ${DOCKER_IMAGE}:${BUILD_NUMBER} ${DOCKER_IMAGE}:latest
                '''
            }
        }
        
        // Automated Testing
        // Execute unit tests in isolated container
        stage('Unit Tests') {
            steps {
                sh '''
                    # Remove any existing test containers
                    docker ps -a --filter "name=unit-test-run" -q | xargs -r docker rm -f || true
                    
                    # Execute test suite
                    docker run --rm \
                        --name unit-test-run \
                        --user root \
                        ${DOCKER_IMAGE}:${BUILD_NUMBER} \
                        bash -c '
                            cd /app
                            python3 -m unittest -v test_app.py
                        '
                '''
            }
        }
        
        // Application Deployment
        // Deploy application to staging environment
        stage('Deploy') {
            steps {
                sh '''
                    # Clean up existing deployments
                    docker stop ${CONTAINER_NAME} || true
                    docker rm -f ${CONTAINER_NAME} || true
                    
                    # Remove containers using target port
                    docker ps --format "{{.Names}}" --filter "publish=${HOST_PORT}" | xargs -r docker rm -f || true
                    
                    # Deploy application
                    docker run -d \
                        --name ${CONTAINER_NAME} \
                        -p ${HOST_PORT}:${CONTAINER_PORT} \
                        -e FLASK_ENV=staging \
                        -e PYTHONUNBUFFERED=1 \
                        ${DOCKER_IMAGE}:${BUILD_NUMBER}
                '''
            }
        }
        
        // Health Verification
        // Ensure application is running correctly
        stage('Health Check') {
            steps {
                sh '''
                    # Allow application startup
                    sleep 10
                    
                    # Verify application health
                    for i in $(seq 1 5); do
                        if docker exec ${CONTAINER_NAME} curl -f http://localhost:${CONTAINER_PORT}/health; then
                            exit 0
                        fi
                        sleep 5
                    done
                    
                    # Health check failed
                    docker logs ${CONTAINER_NAME}
                    exit 1
                '''
            }
        }
    }
    
    // Pipeline Completion Handling
    post {
        always {
            // Clean up resources
            sh '''
                docker ps -a --filter "name=unit-test-run" -q | xargs -r docker rm -f || true
                docker image prune -f || true
            '''
        }
        
        success {
            echo """
            === Deployment Summary ===
            Build: ${BUILD_NUMBER}
            Image: ${DOCKER_IMAGE}:${BUILD_NUMBER}
            Container: ${CONTAINER_NAME}
            Access: http://localhost:${HOST_PORT}
            Health: http://localhost:${HOST_PORT}/health
            """
        }
        
        failure {
            echo "=== Build ${BUILD_NUMBER} Failed ==="
            sh 'docker stop ${CONTAINER_NAME} || true'
            sh 'docker rm -f ${CONTAINER_NAME} || true'
        }
    }
} 